getResult().then((lista) => {
    lista.forEach(async (element, index) => {
        setTimeout(() => {
            getOrden(element.SampleID).then((data) => {
                console.log(`codigo abajo`, element.SampleID);

                const micTests = element.MicSpecs.LISMicSpec;

                const lisLabTests = [];

                if (Array.isArray(micTests) === true) {
                    
                    micTests.forEach((micTest) => {
                    

                        if (micTest.MicTests.LISLabTest) {
                            lisLabTests.push(micTest.MicTests.LISLabTest);
                        }
                    });
                } else {
                    

                    lisLabTests.push(micTests.MicTests.LISLabTest);
                }

                const te = lisLabTests.forEach((t) => t.ResultComments);
                const lisLabTests2 = [];

                if (Array.isArray(te) === true) {
                    te.forEach((rt) => {
                        if (rt.LISComments.TextComment) {
                            lisLabTests2.push(rt.LISComments.TextComment);
                        }
                    });
                } else {
                    

                    lisLabTests2.push(te);
                }

                const micro = element.MicSpecs.LISMicSpec;

                const ListMicro = [];

                if (Array.isArray(micro) === true) {
                    micro.forEach((micr) => {
                        if (micr.MicTests.LISLabTest.MicIsolates) {
                            ListMicro.push(
                                micr.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                            );
                        } else {
                        }
                    });
                } else {
                    if (micro.MicTests.LISLabTest.MicIsolates) {
                        if (
                            Array.isArray(
                                micro.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                            ) == true
                        ) {
                            micro.MicTests.LISLabTest.MicIsolates.LISMicIsolate.forEach(
                                (mcro) => {
                                    ListMicro.push(mcro);
                                }
                            );
                        }

                        ListMicro.push(
                            micro.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                        );
                    }

                    console.log(`no existe LISMicIsolate `);
                }

                listOr = [];
                const microt = element.MicSpecs.LISMicSpec;
            
                if (Array.isArray(microt) === true) {
                    microt.forEach((micr) => {
                        if (micr.MicTests.LISLabTest.MicIsolates) {
                            listOr.push(micr.MicTests.LISLabTest.MicIsolates.LISMicIsolate);
                        } else {
                            console.log("NO EXISTE micr.MicTests.LISLabTest.MicIsolates");
                            //listOr.push(microt.MicTests.LISLabTest.MicIsolates)
                        }
                    });
                    // OBJECTO MICROT
                } else {
                    if (microt.MicTests.LISLabTest.MicIsolates) {
                        //VALIDAR SI ES  OBJECTO ARRAY MICROT microt.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                        if (
                            Array.isArray(
                                microt.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                            ) == true
                        ) {
                            //RECORRER ARRAY
                            microt.MicTests.LISLabTest.MicIsolates.LISMicIsolate.forEach(
                                (mcro) => {
                                    if (mcro.MicAntibiograms) {
                                        mcro.MicAntibiograms.LISMicAntibiogram.MicAntibiotics.LISMicAntibiotic.forEach(
                                            (ant) => {
                                                listOr.push(ant);
                                            }
                                        );
                                    } else {
                                        console.log(
                                            "no existe mcro.MicAntibiograms",
                                            mcro.MicAntibiograms
                                        );
                                    }
                                }
                            );
                        } else {
                            //ELSE OBJECTO MICROT
                            if (
                                microt.MicTests.LISLabTest.MicIsolates.LISMicIsolate
                                    .MicAntibiograms
                            ) {
                                microt.MicTests.LISLabTest.MicIsolates.LISMicIsolate.MicAntibiograms.LISMicAntibiogram.MicAntibiotics.LISMicAntibiotic.forEach(
                                    (lis) => {
                                        listOr.push(lis);
                                    }
                                );
                            }
                            console.log("no existe  kk");
                        }
                    } else {
                        console.log("ok");
                    }
                }

                const item = {
                    SampleID: element.SampleID,
                    Servicio: data[0].Service,
                    Paciente: data[0].SurNameAndName,
                    Sexo: data[0].Sex,
                    Historia: data[0].PatientID1,
                    Tipomuestra: lisLabTests.map((test) => test.TestName).join(","),
                    //  PacienteH:lisLabTests.map((test) => test.ResultComments ? test.ResultComments.LISComments.TextComment.slice(1):'no existe' ).join(', '),
                    Microorganismo: ListMicro.map((mk) => mk.ResultName).join(","),
                    Tecnica: ListMicro.map((mk) =>
                        mk.MicAntibiograms
                            ? mk.MicAntibiograms.LISMicAntibiogram.MethodName
                            : ""
                    ).join(","),
                    Valor: listOr
                        .map((val) =>
                            val.MethodResult
                                ? val.MethodResult.replace("0,", "0.")
                                : val.MethodResult
                        )
                        .join(","),
                    Antibiotico: listOr.map((anti) => anti.AntibioticName).join(","),
                    Sensible: listOr.map((sen) => sen.ValueResultName).join(","),
                };

                dataArray.push(item);
                console.log("1", dataArray.length);
                console.log("12", lista.length);
                if (dataArray.length === lista.length) {
                    res.json({ ok: true, listaordenes: dataArray });
                }
                //res.json({ ok: true, listaordenes: dataArray });

                //}
            });
        }, index * 1000);
    });
});